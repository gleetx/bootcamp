Debugathon Solutions:

Exercise 1 Corrected Function:

Notes: 
- Need to make the text lowercase. 
- Need to use default dictionary instead of regular dictionary. 
- Need to change split to be any whitespace and not just a single space.

def count_words(text):
    lower_text = text.lower()
    list_words =  lower_text.split()
    
    from collections import defaultdict
    word_dictionary = defaultdict(int)
    for word in list_words:
        word_dictionary[word] += 1
    return(word_dictionary)


------------------------------------------------------


Exercise 2 Corrected Function:

Notes:
- list is assigned an integer. Remove this. Restart kernel if necessary.
- For loop should iterate over range(7), not b.
- Need to round the fibonacci result to the 3rd decimal place.

def fibonacci_gt(n, t1, t2):
    if n<0: 
        print("Incorrect input") 
    elif n == 0: 
        return t1
    elif n == 1: 
        return t2
    else: 
        return fibonacci_gt(n-1,t1,t2)**2 + fibonacci_gt(n-2,t1,t2)

def generate_numbers(a, b):
    numbers = list()
    for i in range(7):
        numbers.append(round(fibonacci_gt(i,a,b),3))
    return numbers


------------------------------------------------------


Exercise 3 Corrected Function:

Notes:
- Set minimum price to be 0th element of our input prices list
- Initialize max_profit to be negative infinity
- Iterate over prices list
- If price is lower, update min_price
- If profit is higher, update max_profit

def make_money(prices): ## `prices` is a list
    min_price = prices[0]
    from math import inf
    max_profit = -inf
    for i in range(len(prices)):
        if (prices[i] < min_price):
            min_price = prices[i]
        elif prices[i] - min_price > max_profit:
            max_profit = prices[i] - min_price
    return max_profit


------------------------------------------------------


Exercise 4 Corrected Function: 

Notes:
Issue is with how the board is created. Bad solution creates a single row of the board and then copies this row three times. 
Since you are pointing to same row object, when you set X, it sets an element in all 3 rows to X. Need to create rows not as copies of a single row.
Use list comprehension or for loop for this.

def initialise_board(size,position):
    board = [['']*size for i in range(size)]
    a = position[0]
    b = position[1]
    board[a][b] = "X"
    return(board)


